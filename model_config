lr_over_epoch_schedule = tf.keras.callbacks.LearningRateScheduler(scheduler_lr_divided_by_epoch)
every_three = tf.keras.callbacks.LearningRateScheduler(reduce_per_three)
custom1 = tf.keras.callbacks.LearningRateScheduler(custom)
print_lr = printLearningRate()
lr_dict = {}

tf.keras.backend.clear_session()
load_model = False


model_load_from = ' '

#----------------------------------------------- Config ---------------------------------------------------------
model_save_to = ''
csv_save_to = ''
best_model_save_to = ''#'/content/drive/MyDrive/UCD_Stuff/ActualModels/NSRDB-PSM-Models/DeepLSTM-{epoch:03d}'

csvLogger = tf.keras.callbacks.CSVLogger(csv_save_to, separator=",", append=True)
model_checkpoint_callback= tf.keras.callbacks.ModelCheckpoint(
                                      filepath= model_save_to,monitor= "val_mae", verbose=1,
                                      save_best_only=False,save_weights_only=False,mode="auto",save_freq="epoch", period = 5)

best_model_checkpoint_callback= tf.keras.callbacks.ModelCheckpoint(
                                      filepath= best_model_save_to ,monitor= "val_mae", verbose=1,
                                      save_best_only=True,save_weights_only=False,mode="auto",save_freq="epoch")

#tfa.optimizers.AdamW;  tf.keras.optimizers.Nadam(1e-3)
compileConfig = {'optimizer':tf.keras.optimizers.Nadam(lr=1e-3), 'loss':tf.keras.losses.Huber(),
                 'metrics':['mse','mae','mape']}

fitConfig = {'x':rhum_train_window,'epochs':50,
             'validation_data':rhum_valid_window,
             'callbacks':[print_lr]}

model_choice = 0
input_shape =(100, 168, 4,10, 10)

convlstm_model = tf.keras.models.Sequential([
        tf.keras.layers.Conv3D(8,2,batch_input_shape=input_shape,
                               data_format='channels_first',padding='same',activation='relu'),
        tf.keras.layers.MaxPooling3D(2,data_format='channels_first'),
        tf.keras.layers.Conv3D(8,2,input_shape=input_shape,
                               data_format='channels_first',padding='same',activation='relu'),
        tf.keras.layers.MaxPooling3D(2,data_format='channels_first'), 
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(24),
        tf.keras.layers.Lambda(lambda x: (x*(rhum_max_44-rhum_min_44))+ rhum_min_44)
])

convlstm_model.summary()
